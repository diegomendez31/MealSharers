//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class MealSharers
{

    public List<Meal> meals
	{
		get;
		set;
	}

    public List<String> foodPreference
    {
        get;
        set;
    }

    public List<String> transport
    {
        get;
        set;
    }

    public SortedList<string, Cook> cooks
	{
		get;
		set;
	}

	public SortedList<string, Administrator> administrators
	{
		get;
		set;
	}

	public SortedList<string, Eater> eaters
	{
		get;
		set;
	}

    public Cook currentCook
    {
        get;
        set;
    }

    public Eater currentEater
    {
        get;
        set;
    }

    public Administrator currentAdmin
    {
        get;
        set;
    }

    public bool requestPVG
    {
        get;
        set;
    }
    public bool requestHygienic
    {
        get;
        set;
    }

    public MealSharers()
    {
        loadTestData();
        requestPVG = false;
        requestHygienic = false;
    }

    private void loadTestData()
    {
        transport = new List<string>();
        transport.Add("Car");
        transport.Add("Bus");
        transport.Add("Cycle");
        transport.Add("Foot");
        transport.Add("None");
        foodPreference = new List<string>();
        foodPreference.Add("Italian");
        foodPreference.Add("British");
        foodPreference.Add("French");
        foodPreference.Add("German");
        foodPreference.Add("None");
        administrators = new SortedList<string, Administrator>();
        cooks = new SortedList<string, Cook>();
        eaters = new SortedList<string, Eater>();
        meals = new List<Meal>();
        Administrator a1 =  new Administrator("Administrator 1", "+44785245874", "admin", "password", "EH11");
        Manager ma1 = new Manager("Manager 1", "+44785245874", "manager", "password", "EH11");
        administrators.Add(a1.username, a1);
        administrators.Add(ma1.username, ma1);
        Cook c1 = new Cook("diegomendez31", "password","Diego Mendez", "22A Orwell Terrace", "EH112DY", "+447810086457", "Italian", "Bus", "OK", "27/11/2017", "OK", "27/11/2020");
        Cook c2 = new Cook("jonsnow", "password", "Jon Snow", "22B Caledoian Cres", "EH112AQ", "+44781234456", "British", "Car", "OK", "27/11/2017", "renewal", "27/12/2017");
        Cook c3 = new Cook("nedstark", "password", "Ned Stark", "151 Dundee Street ","EH111BP", "+44789684555", "French", "Bus", "awaiting", "27/11/2017", "OK", "27/11/2020");
        cooks.Add(c1.userName, c1);
        cooks.Add(c2.userName, c2);
        cooks.Add(c3.userName, c3);
        Eater e1 = new Eater("catstark","password","Catherine Stark", "17 Fowler Terrace ","EH111DD", "+44781234456", "British");
        Eater e2 = new Eater("sansastark", "password", "Sansa Stark", "200 Darly Road","EH112ES", "+447812323423", "Italian");
        Eater e3 = new Eater("danytargaryen", "password", "Dany Targaryen", "22A Orwell Terrace","EH112DY", "+44781233446", "Italian");
        eaters.Add(e1.userName, e1);
        eaters.Add(e2.userName, e2);
        eaters.Add(e3.userName, e3);
        Review r1 = new Review("Excellent food, Diego is an amazing cook.", 5);
        Review r3 = new Review("Good meal, Diego was late.", 4);
        Review r2 = new Review("Regular meal, Jon was unpolite.", 2);

        Meal m1 = new Meal(c1, e3, "15/11/2017 16:00", "Italian");
        m1.status = "OK";
        m1.addEaterReview(r1);
        Meal m2 = new Meal(c2, e1, "20/11/2017 20:00", "British");
        m2.status = "OK";
        m2.addEaterReview(r2);
        Meal m3 = new Meal(c1, e2, "21/11/2017 15:00", "Italian");
        m3.addEaterReview(r3);
        m3.status = "OK";
        Meal m4 = new Meal(c2, e2, "25/11/2017 19:00", "French");
        m4.status = "Awaiting";
        meals.Add(m1);
        meals.Add(m2);
        meals.Add(m3);
        meals.Add(m4);
    }

    public bool loginAdmin(String username, String password)
    {
        if (administrators.ContainsKey(username))
        {     
                Administrator a;
                administrators.TryGetValue(username, out a);
                currentAdmin = a;
            if (currentAdmin.password.Equals(password))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        return false;
    }

    public bool loginEater(String username, String password)
    {
        if (eaters.ContainsKey(username))
        {
            Eater e;
            eaters.TryGetValue(username, out e);
            currentEater = e;
            if (currentEater.password.Equals(password))
            {
                return true;
            }else
            {
                return false;
            }
        }
        return false;
    }

    public bool loginCook(String username, String password)
    {
        if (cooks.ContainsKey(username))
        {
            Cook c;
            cooks.TryGetValue(username, out c);
            currentCook = c;
            if (currentCook.password.Equals(password))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        return false;
    }

    public void logout()
    {
        requestPVG = false;
        requestHygienic = false;
        currentAdmin = null;
        currentCook = null;
        currentEater = null;
    }
    public virtual void registerCook(string username, string password, string name, string address, string postCode, string phone, string foodPrefer, string transport)
	{
        DateTime today = DateTime.Today;
        String datePVG = today.ToShortDateString();
        today.AddYears(3);
        String dateHygienic = today.ToShortDateString();
        Cook c = new Cook(username, password, name, address, postCode, phone, foodPrefer, transport, "OK", datePVG, "OK", dateHygienic);
        requestHygienic = false;
        requestPVG = false;
        cooks.Add(username, c);
	}

    public virtual void registerEater(string username, string password, string name, string address, string postCode, string phone, string foodPrefer)
	{
        
        Eater c = new Eater(username, password, name, address, postCode, phone, foodPrefer);
        eaters.Add(username, c);
	}

    public List<Meal> listMyMealsEater()
    {
        List<Meal> mymeals = new List<Meal>();
        for (int i = 0; i < meals.Count; i++)
        {
            if (meals[i].eater.Equals(currentEater) && meals[i].status.Equals("OK"))
            {
                mymeals.Add(meals[i]);
            }        
        }
            return mymeals;
    }


    public List<Meal> listMyMealsSystem()
    {
        List<Meal> mymeals = new List<Meal>();
        for (int i = 0; i < meals.Count; i++)
        {
            if (meals[i].status.Equals("OK"))
            {
                mymeals.Add(meals[i]);
            }
        }
        return mymeals;
    }
    public List<Meal> listMealsInvitations()
    {
        List<Meal> mymeals = new List<Meal>();
        for (int i = 0; i < meals.Count; i++)
        {
            if (meals[i].eater.Equals(currentEater) && meals[i].status.Equals("Awaiting"))
            {
                mymeals.Add(meals[i]);
            }
        }
        return mymeals;
    }
    public List<Meal> listMyMealsCook()
    {
        List<Meal> mymeals = new List<Meal>();
        for (int i = 0; i < meals.Count; i++)
        {
            if (meals[i].cook.Equals(currentCook))
            {
                mymeals.Add(meals[i]);
            }
        }
        return mymeals;
    }

	public virtual void registerAdministrator()
	{
		throw new System.NotImplementedException();
	}


	public virtual void offerMeal(Eater eater, string date)
	{
        
        Meal m = new Meal(currentCook, eater, date, currentCook.foodPreference);
        meals.Add(m);
	}

	public virtual void writeReviewCook(Meal meal, Review r)
	{
        meal.addCookReview(r);
	}

	public virtual void writeReviewEater(Meal meal, Review r)
	{
        meal.addEaterReview(r);
	}

    public List<Meal> listMyReviewsCook()
    {
        List<Meal> myreviews = new List<Meal>();
        for (int i = 0; i < meals.Count; i++)
        {
            if (meals[i].cook.Equals(currentCook))
            {
                if (meals[i].reviewEater != null)
                {
                    myreviews.Add(meals[i]);
                }
            }
        }
        return myreviews;
    }

    public List<Eater> listEatersByDistance(string postcode)
    {
        List<Eater> distanceEaters = new List<Eater>();
        List<Eater> eats = eaters.Values.ToList();
        for (int i = 0; i < eaters.Count; i++)
        {
            if (eats[i].postCode.Contains(postcode.Substring(0, 3)))
            {
                distanceEaters.Add(eats[i]);
            }
        }
            return distanceEaters;
    }

    public List<Eater> listEatersByFood(string food)
    {
        List<Eater> distanceEaters = new List<Eater>();
        List<Eater> eats = eaters.Values.ToList();
        for (int i = 0; i < eaters.Count; i++)
        {
            if (eats[i].foodPreference.Equals(food))
            {
                distanceEaters.Add(eats[i]);
            }
        }
        return distanceEaters;
    }

	public virtual Meal listMeals()
	{
		throw new System.NotImplementedException();
	}

	public List<Cook> generateQuarterlyReport()
	{
		List<Cook> criticals = new List<Cook>();
        List<Cook> co = cooks.Values.ToList();
        for (int i = 0; i < co.Count; i++)
        {
           
            criticals.Add(co[i]);

        }
        return criticals;
	}

	public List<User> ShowVolunteerMap()
	{
        List<User> users = new List<User>();
        List<Eater> eats = eaters.Values.ToList();
        for (int i = 0; i < eaters.Count; i++)
        {
                users.Add(eats[i]);

        }
        List<Cook> co = cooks.Values.ToList();
        for (int i = 0; i < co.Count; i++)
        {
            users.Add(co[i]);

        }
        return users;

	}

    public List<Cook> listCookCriticalReviews()
	{
        List<Cook> criticals = new List<Cook>();
        List<Cook> co = cooks.Values.ToList();
        for (int i = 0; i < co.Count; i++)
        {
            if(co[i].rating <= 3)
            criticals.Add(co[i]);

        }
        return criticals;
	}

    public List<Eater> listEatersSatisfactionRating()
	{
        List<Eater> distanceEaters = new List<Eater>();
        List<Eater> eats = eaters.Values.ToList();
        for (int i = 0; i < eaters.Count; i++)
        {
            List<Meal> mymeals = new List<Meal>();
            mymeals = listMyMealsByEater(eats[i]);
            for (int j = 0; j < mymeals.Count; j++)
            {
                if (mymeals[j].reviewEater.rating <= 2)
                {
                    distanceEaters.Add(eats[i]);
                    break;
                }

            }
       
        }
        return distanceEaters;
	}

    public List<Eater> listEaters()
    {
        List<Eater> distanceEaters = new List<Eater>();
        List<Eater> eats = eaters.Values.ToList();
        for (int i = 0; i < eaters.Count; i++)
        {
            
               distanceEaters.Add(eats[i]);
                   

        }
        return distanceEaters;
    }


    public List<Meal> listMyMealsByEater(Eater e)
    {
        List<Meal> mymeals = new List<Meal>();
        for (int i = 0; i < meals.Count; i++)
        {
            if (meals[i].eater.Equals(e) && meals[i].reviewEater != null)
            {
                mymeals.Add(meals[i]);
            }
        }
        return mymeals;
    }

	public virtual void requestPVGcheck(String request)
	{
        if (request.Equals("OK"))
        {
            requestPVG = true;
        }else
        {
            requestPVG = false;
        }
	}

	public virtual void requestHygieneCertification(String request)
	{
        if (request.Equals("OK"))
        {
            requestHygienic = true;
        }
        else
        {
            requestHygienic = false;
        }
    }

	public virtual void approveCook(Cook cook)
	{
		throw new System.NotImplementedException();
	}

}

